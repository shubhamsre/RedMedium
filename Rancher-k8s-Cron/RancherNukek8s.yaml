---
apiVersion: v1
kind: Namespace
metadata:
  name: rancher-system
---
apiVersion: v1
kind: Secret
metadata:
  namespace: rancher-system
  name: rancher-secret
type: Opaque
data:
  serverurl: <BASE64 Rancher Cluster URL>
  token: <BASE64 Rancher API Token>
  context: <BASE64 Rancher Cluster Context>
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  namespace: rancher-system
  name: rancherprune
spec:
  schedule: "12 12 * * 0" # Cron at 12:12 weekly on Sunday
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: rancherprune
            image: alpine
            env:
            # Rancher Cluster URL
            - name: RANCHER_SERVERURL
              valueFrom:
                secretKeyRef:
                  name: rancher-secret
                  key: serverurl
            # Generate API-token with no scope
            - name: RANCHER_TOKEN
              valueFrom:
                secretKeyRef:
                  name: rancher-secret
                  key: token
            # Get the appropriate context
            - name: RANCHER_CONTEXT
              valueFrom:
                secretKeyRef:
                  name: rancher-secret
                  key: context
            imagePullPolicy: IfNotPresent
            command:
            - /bin/sh
            - -c
            - apk update > /dev/null; apk add wget  > /dev/null; apk add curl > /dev/null; apk add openssh-client > /dev/null; while [ -z "$VERSION" ]; do VERSION=$(curl --silent "https://api.github.com/repos/rancher/cli/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/'); if [ -n "$VERSION" ]; then echo "Rancher v$VERSION"; wget -q https://github.com/rancher/cli/releases/download/v$VERSION/rancher-linux-amd64-v$VERSION.tar.gz; tar -zxvf rancher-linux-amd64-v$VERSION.tar.gz  -C /usr/local/bin/ --strip-components=2; fi; done; rancher login $RANCHER_SERVERURL --token $RANCHER_TOKEN --context $RANCHER_CONTEXT; rancher nodes; shuf -e $(rancher nodes | awk '{print $2}' | grep -i "worker-node-identifier-suffix") > onprem_worker_nodes.txt; cat onprem_worker_nodes.txt; while read node; do echo "$node - Cleaning buffer/cache"; rancher ssh $node -o StrictHostKeyChecking=no -- "echo 3 | sudo tee /proc/sys/vm/drop_caches" </dev/null; echo "Clean Exited Containers - $node"; rancher ssh $node -o StrictHostKeyChecking=no -- "sudo docker ps -a --filter 'status=exited' -q | xargs --no-run-if-empty sudo docker rm; echo "Docker Image Prune [Registry- containerRegistry] - $node"; sudo docker images --filter=reference='container.registry.io/*/*' -q --no-trunc | xargs --no-run-if-empty sudo docker rmi" </dev/null; echo "Unused Docker Images Cleared - $node"; done<onprem_worker_nodes.txt      
          restartPolicy: OnFailure